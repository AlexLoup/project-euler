package com.euler;

import java.util.ArrayList;

/**
 *      The sequence of triangle numbers is generated by adding the natural numbers.
 *      So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 *      The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 *      1:  1
 *      3:  1, 3
 *      6:  1, 2, 3,  6
 *      10: 1, 2, 5, 10
 *      15: 1, 3, 5, 15
 *      21: 1, 3, 7, 21
 *      28: 1, 2, 4,  7, 14, 28
 *
 *
 *      We can see that 28 is the first triangle number to have over five divisors.
 *      What is the value of the first triangle to have OVER 500 DIVISORS?
 */
public class Problem012 {
    public static void main(String[] args) {
        int n = 10000;          //max number of natural numbers
        int max = 500;      //max number of divisors
        int numDiv;

        ArrayList<Integer> tris = getTriNums(n);
        for (Integer x : tris) {
            numDiv = getNumDivisors(x);
            System.out.println(x + "    is the  " + (tris.lastIndexOf(x) + 1) + "  natural number and has " + numDiv + " divisors.");
            if (numDiv >= max) {
                break;
            }
        }
    }

    public static ArrayList<Integer> getTriNums(int quantity){
        ArrayList<Integer> triangles = new ArrayList<>();
        int sum = 0;
        for (int i=1; i<quantity+1; i++) {
            sum += i;
            triangles.add(sum);
        }
        return triangles;
    }

    public static int getNumDivisors (int n){

        int divisors = 0;
            for (int i = 1; i <= n; i++) {
                if (n % i == 0) {
                    divisors += 1;
                }
            }

        return divisors;
    }

}
